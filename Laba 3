#include <iostream>
#include <math.h>

using namespace std;

class Triangle 
{
public:
	double a, b, c;
	unsigned int color;
private:

	Triangle() : a(1.0), b(1.0), c(1.0), color(0){}
	Triangle(double ai): a(ai), b(1.0), c(1.0), color(0) {}
	Triangle(double bi): a(1.0), b(bi), c(1.0), color(0) {}
	Triangle(double ci) : a(1.0), b(1.0), c(ci), color(0) {}
	Triangle(double a, double b, double c, int color) {
		if (a >= 1.0)
			this->a = a;
		else
			this->a = 1.0;
		if (b >= 1.0)
			this->b = b;
		else
			this->b = 1.0;
		if (c >= 1.0)
			this->c = c;
		else
			this->c = 1.0;
		if (color >= 0)
			this->color = color;
		else
			this->color = 0;
	}
	double getA() const
	{
		return a;
	}
	void setA(double a)
	{
		if (a < 0 || a > 1.e+100)
		{
			cout << " Error set  a \n";
			return;
		}
		this->a = a;
	}
	double getB() const
	{
		return b;
	}
	void setB(double b)
	{
		if (b < 0 || b > 1.e+100)
		{
			cout << " Error set  b \n";
			return;
		}
		this->b = b;
	}
	double getC() const
	{
		return c;
	}
	void setC(double c)
	{
		if (c < 0 || c > 1.e+100)
		{
			cout << " Error set  c \n";
			return;
		}
		this->c = c;
	}
	double getColor() const
	{
		return color;
	}
	void setColor(int color)
	{
		if (color < 0 || color > 10000)
		{
			cout << " Error set  color \n";
			return;
		}
		this->color = color;
	}
	double P() 
	{
		return a + b + c;
	}
	double S()
	{
		double p;
		p = P() / 2;
		return sqrt(p * (p - a) * (p - b) * (p - c));
	}
	void PrintIn()
	{
		cout << "/n A= " << a << "  B= " << b << "  C= " << c << endl;
		cout << "P = " << P() << "    S = " << S() << endl;
	}
};
int mainExample1()
{
	Triangle obj;
	obj.PrintIn();

	double in_a, in_b, in_c;
	int in_color;
	
	cout << " Input sides Triangle  "; cin >> in_a >> in_b >> in_c;
	cout << "  Input color Triangle  "; cin >> in_color;
	Triangle obj1(in_a), obj2(in_color), obj3(in_a, in_b, in_c, in_color);
	obj1.PrintIn();
	obj2.PrintIn();
	obj3.PrintIn();
	obj.setA(-5);
	obj.PrintIn();
	obj.setA(5);
	obj.PrintIn();
	obj.setB(2.e100);
	obj.PrintIn();
	obj.setColor(-10);
	obj.PrintIn();
	obj.setColor(10);
	obj.PrintIn();
	obj.setColor(10001);
	obj.PrintIn();
	obj.setC(0.5);
	obj.PrintIn();
	obj.setC(10);
	obj.PrintIn();
	cout << " End testing \n";
	return 1;
}
//-----Ex 2----------------------------------------------------------
class VC
{
	long* l;
	int state = 0;
	static int count;

public:
	VC() : VC(2) {}
	VC(int c);
	VC(int c, long&);
	VC(int c, long*);
	VC(const VC& s);
	VC& operator=(const VC& s);
	~VC() {
		std::cout << " del vec";
		if (l) delete[] l;
	}
	void Output();
	void Input();
	void ADD(long i)
	{
		if (i >= count)
		{
			cout << "Wrong index" << endl;
			return;
		}
		else
		{
			l[i] = 10;
			cout << "l[" << i << "] = 10" << endl;
		}
	};
	long SET(int i)
	{
		if (i >= count)
			return 0;
		else
			return l[i];
	};
	VC Plus(VC& b)
	{
		int tnum;
		tnum = count < b.count ? count : b.count;
		if (tnum >= 0) {
			VC tmp(tnum);
			for (int i = 0; i < tnum; i++) tmp.l[i] = l[i] + b.l[i];
			return tmp;
		}
		return VC(1);
	}
	VC Minus(VC& b)
	{
		int tnum;
		tnum = count < b.count ? count : b.count;
		if (tnum >= 0) {
			VC tmp(tnum);
			for (int i = 0; i < tnum; i++) tmp.l[i] = l[i] - b.l[i];
			return tmp;
		}
		return VC(1);
	};
	VC Multip(unsigned int t)
	{
		VC b(count);
		for (int i = 0; i < count; i++)
			b.l[i] = l[i] * t;
		return b;
	};
	bool Less(VC& s)
	{
		if (count < s.count)
			return true;
		else if (count > s.count)
			return false;
		for (int i = 0; i < count; i++)
		{
			if (l[i] > s.l[i])
				return false;
		}
		return true;
	}
	bool More(VC& s)
	{
		if (count > s.count)
			return true;
		else if (count < s.count)
			return false;
		for (int i = 0; i < count; i++)
		{
			if (l[i] < s.l[i])
				return false;
		}
		return true;
	}
	bool EQ(VC& s)
	{
		if (count != s.count)
			return false;
		for (int i = 0; i < count; i++)
			if (l[i] != s.l[i])
				return false;
		return true;
	}

};

VC::VC(int c) {
	if (c <= 0)    c = 2;
	count = c;
	l = new long[c];
	for (int i = 0; i < c; i++) {
		l[i] = 0;
	}
}
VC::VC(int c, long& b) : VC(c) {
	for (int i = 0; i < count; i++) {
		l[i] = b; 
	}
}

VC::VC(int c, long* p) : VC(c) {
	if (p != nullptr)
		for (int i = 0; i < count; i++)
			l[i] = p[i];

}

VC::VC(const VC& s) {
	count = s.count;
	l = new long[count];
	state = 0;
	for (int i = 0; i < count; i++)   
		l[i] = s.l[i];
}

VC& VC::operator=(const VC& s) {

	if (count != s.count)
	{
		if (l) delete[] l;
		count = s.count;
		l = new long[count];
		state = 0;
	}
	for (int i = 0; i < count; i++)   l[i] = s.l[i];
	return *this;
}
void VC::Input() {
	int in_c = 0;
	do {
		cout << "Input size Vec\n";
		cin >> in_c;
	} while (in_c <= 0);
	if (count != in_c) {
		count = in_c;
		if (l) delete[] l;
		l = new long[count];
	}
	for (int i = 0; i < count; i++) 
	{
		cout << " l[" << i << "] ";
		cin >> l[i];
	}
}

void VC::Output() {
	if (count != 0) {
		for (int i = 0; i < count; i++) {
			cout << " l [ " << i << " ]   " << l[i] << '\t';
			cout << endl;
		}
	}
}


int MainExample2()
{
	long m=5;
	VC v, w(3), k(3, &m), g;
	k.Output();
	g = w.Plus(v);
	cout << "w + v = "; g.Output();
	w.Output();
	v = w;
	v.Output();
	cout << v.EQ(w);
	v.Multip(3);
	cout << w.Less(v);
	k.Input();
	g = k.Minus(g);
	VC c(g);
	w.SET(2);
	w.SET(10);
	c.ADD(3);

	return 1;
}
